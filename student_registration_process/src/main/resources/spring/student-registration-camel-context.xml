<?xml version="1.0" encoding="UTF-8"?>

<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:camel="http://camel.apache.org/schema/spring"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
        ">

    <!-- Defines transactionalDS bean along with any other environment specific needs -->
    <import resource="classpath:spring/environment-specific-camel-context.xml" />

    <!-- Spring configuration based on annotations: required for Spring Autowiring -->
    <!-- Fuse on EAP:  also needs to specify the following in application's jboss-deployment-structure.xml :
       <module name="org.springframework.spring" export="true" meta-inf="export" /> 
    -->
    <context:annotation-config />

    <!-- Define the lms_transactional JDBC templates -->
    <bean id="lmsJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="transactionalDS" />
    </bean>

    <!-- Step 3: Define the DAOs -->
    <bean id="canonicalDAO" class="com.redhat.gpe.dao.DomainDAOImpl" />

    <bean id="emailServiceBean" class="com.redhat.gpte.services.EmailServiceBean" />
    <bean id="studentRegBean" class="com.redhat.gpte.studentregistration.service.StudentRegistrationServiceBean" />
    <bean id="ipaServiceBean" class="com.redhat.gpte.studentregistration.service.IPAHTTPServiceBean" />
    <bean id="ldapServiceBean"                class="com.redhat.gpte.studentregistration.service.LDAPServiceBean" />
    <bean id="updateStudentAttributeResultsAggregatorStrategy" class="com.redhat.gpte.studentregistration.service.UpdateStudentAttributesResultsAggregator" />

  <!-- bridging Spring and Camel property placeholders -->
  <camelContext trace="false" id="user-registration-process" xmlns="http://camel.apache.org/schema/spring">
    <dataFormats>
        <bindy type="Csv" classType="com.redhat.gpte.studentregistration.util.StudentRegistrationBindy" id="studentRegBindy"/>
    </dataFormats>

    <onException>
        <exception>java.lang.Exception</exception>

        <!-- Exception propogated to JUnit tests when set to false -->
        <!-- Setting of sys property substition doesn't appear to take affect -->
        <!-- handled><constant>{{sb_onexception_handled}}</constant></handled -->
        <!--handled><constant>{{ipa_onexception_handled}}</constant></handled-->
        <handled><constant>true</constant></handled>

        <log message="Exception encountered : ${exception.message}" loggingLevel="ERROR"/>
        <log message="${exception.stacktrace}" loggingLevel="ERROR"/>
        <setBody><simple>${exception.message}</simple></setBody>
        <to uri="seda:send-email"/>
    </onException>


    <onException>
        <description>
            Catches InvalidAttributeException thrown by: UpdateStudentAttributesResultsAggregator
        </description>
        <exception>com.redhat.gpte.studentregistration.util.InvalidAttributeException</exception>
        <setBody><simple>${exception.message}</simple></setBody>
        <to uri="{{sr_exception_output_uri}}"/>
    </onException>



<!-- *************************          Retrieve Student  LDAP Attributes       ******************************  -->
    <route id="get-student-company-info">
        <description>
            1)  Given a Student object (with email populated), queries IPA LDAP for student attributes (company name, geo, role)
            3)  If student email found, then Student object populated with attributes is returned
            2)  If student email not found, validation exception is thrown
        </description>
        <from uri="vm:get-student-company-info"/>
        <to uri="bean:ldapServiceBean?method=getStudentCompanyInfo" id="getStudentCompanyInfo" />
    </route>

    <route id="check-for-RHT-studentAttributes-in-batch">
        <description>
            1)  Periodically checks that all attributes (ie:  geo and title) in the Student table are populated
            2)  In case of missing attributes, queries GPTE LDAP and adds the results to Student table

                NOTE:  Student attributes are useful for Dashbuilder reporting filters
        </description>
        <from uri="{{sr_check-for-rht-student_attributes_batch_uri}}"/>
        <log message="@@@@@@@@@@@@@@@@@@@@@@@@@    Starting .... check-for-studentAttributes" loggingLevel="INFO"/>
        <to uri="bean:studentRegBean?method=selectRHTStudentsWithMissingAttributes"/>
        <filter>
            <simple>${header.studentsToUpdate} > 0</simple>

            <split id="loop-for-each-student-to-get-attributes">
                <simple>${body}</simple>
                <filter>

                    <!-- filter for RHT students only when updating Skills Exchange data -->
                    <method ref="studentRegBean" method="isRedHatStudent"></method>

                    <log message="${body.email} : retrieving LDAP metadata"/>
                    <to uri="bean:ldapServiceBean?method=getStudentAttributesFromLDAP" id="getStudentAttributes" />
                    <to uri="direct:studentAttributeAggregate" />
                    <filter>

                        <!-- Allow only error free Skills Exchange records to be updated -->
                        <method ref="ldapServiceBean" method="hasNoExceptionProperty"></method>
                        <to uri="direct:persist-student" />

                    </filter>
                </filter>
            </split>

            <!-- Now that route has looped through all students with missing attributes, send an aggregated report -->
            <setHeader headerName="aggregation_stop"><constant>"STOP"</constant></setHeader>
            <to uri="direct:studentAttributeAggregate" />

        </filter>
        <log message="@@@@@@@@@@@@@@@@@@@@@@@@@ done\n" loggingLevel="INFO"/>
    </route>

    <route id="studentAttribute-aggregate" >
        <from uri="direct:studentAttributeAggregate" />
        <aggregate strategyRef="updateStudentAttributeResultsAggregatorStrategy" >
            <correlationExpression>
                <simple>true</simple>
            </correlationExpression>
            <completionPredicate>
                <simple>${body} contains 'STOP'</simple>
            </completionPredicate>

            <!-- No errors encountered;  send email of successful processing -->
            <setBody><constant>Skills Exchange Integration App:  All Red Hat students updated with LDAP metadata</constant></setBody>
            <to uri="seda:send-email"/>
        </aggregate>
    </route>

<!-- ***********************************************************************************************************  -->





<!-- *******************        Sumtotal Student Registration           *****************************************   -->

    <route id="receive-sumtotal-student-registrations">
        <description>
            1) Executes validation logic on inbound Student Registration data file generated from SumTotal
            2) Kicks back data that does not pass validation logic and send notification email of problem(s)
            3) Persists Student objects

            Note regarding sumtotal data file:
                It has duplicates because we are pulling the data from the registration of each ELAB course.  
                So if a person registers for an accreditation that has 3 ELABs in it, they will appear 3 times.
        </description>
        <from uri="{{sr_receive_sumtotal_student_reg_input-uri}}"/>
        <log message="Received Student Registration email. from: ${header.Return-Path}, subject ${header.subject}" id="log_student_reg_receive"/>
        <to uri="bean:studentRegBean?method=changeMapToListOfValues" />
            <split id="for-each-student-reg-attachment">
                <simple>${body}</simple>
                <unmarshal ref="studentRegBindy"/>
                <doTry>
                    <!--potentially throws this exception:
                        Failed to invoke method: size on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: size not found on bean: DokeosCourseCompletion -->
                    <log message="# student registrations found in ${header.CamelFileName} : ${body.size()}"/>
                    <to uri="bean:studentRegBean?method=convertToCanonicalStudents" />
                    <split id="for-each-new-student-reg">
                        <simple>${body}</simple>
                        <to uri="direct:persist-student" />
                    </split>
                    <doCatch>
                        <exception>org.apache.camel.language.bean.RuntimeBeanExpressionException</exception>
                        <log message="only 1 student registration found in ${header.CamelFileName}"/>
                        <to uri="bean:studentRegBean?method=clearException" />
                        <to uri="bean:studentRegBean?method=convertStudentRegBindyToCanonicalStudent" />
                        <to uri="direct:persist-student" />
                    </doCatch>
                </doTry>
                <to uri="bean:studentRegBean?method=throwAnyCachedExceptions" />
                <to uri="seda:send-email" />
            </split>
    </route>

    <route id="post-new-students-to-ipa">
        <description>
        </description>
        <from uri="{{sr_post-new-students-to-ipa-uri}}"/>
        <log message="*!*!*!*!   Post New Students to IPA ...... Starting" id="log_post_new_students_completed"/>
        <to uri="bean:studentRegBean?method=queryForStudentsToPushToIPA" />
        <to uri="bean:ipaServiceBean?method=createLdapTemplateFile" />
        <choice>
                <when>
                    <simple>{{ipa_ldap.testMode}}</simple>
                    <log message="ipa_ldap.testMode set to true.  Will not upload to IPA LDAP"/>
                </when>
                <otherwise>
                    <to uri="bean:ipaServiceBean?method=uploadToLdapServer"/>
                </otherwise>
        </choice>
        <log message="*!*!*!*!   Post New Students to IPA ...... Completed" id="log_post_new_students_done"/>
    </route>

<!--        ***************************************************************************************************         -->



    <route id="persist-student" >
        <from uri="direct:persist-student" />
        <to uri="bean:studentRegBean?method=updateStudent" id="update-student" />
    </route>

    <route id="persist-company" >
        <from uri="direct:persist-company" />
        <to uri="bean:studentRegBean?method=updateCompany" id="update-company" />
    </route>

    <route id="send-email">
        <from uri="seda:send-email"/>
        <removeHeaders pattern="*" excludePattern="Return-Path"/>
        <to uri="bean:emailServiceBean?method=setHeaderToWithSendersEmail"/>
        <to uri="bean:emailServiceBean?method=clearAttachments"/>
        <setHeader headerName="From" id="send-email-set-header" >
            <constant>GPTE Student Registrations &lt;{{user.name}}.noreply@{{jboss.host.name}}.com&gt;</constant>
        </setHeader>
        <choice id="if-exception-exists">
            <when>
                <simple>${exception.message} != null</simple>
                <setHeader headerName="Subject">
                    <constant>GPTE Student Registration Service ({{jboss.host.name}}): Problem processing data</constant>
                </setHeader>

                <!-- Appears that exception.message is not passed to velocity template -->
                <setBody><simple>${exception.message}</simple></setBody>

                <to uri="velocity:emailTemplates/problem-reply-email.vm"/>
            </when>
            <otherwise>
                <setHeader headerName="Subject">
                    <constant>GPTE Student Registration Service ({{jboss.host.name}}): Success</constant>
                </setHeader>
                <to uri="velocity:emailTemplates/auto-reply-email.vm"/>
            </otherwise>
        </choice>
        <filter>
            <constant>{{gpte_enable_all_emails}}</constant>
            <to uri="smtps://smtp.gmail.com?username={{gpte_email_username}}&amp;password={{gpte_email_password}}" id="send_email"/>
            <log message="Sent reply email to: ${header.to}"/>
        </filter>
    </route>



<!--        *********************           experimental        *******************     -->

    <!--route autoStartup="true" id="update_salesforce_with_student_data">
        <from uri="{{sr_update_salesforce_with_student_data}}" />
        <log message="((((((((((    Starting .... update_salesforce_with_student_data" loggingLevel="INFO"/>
        <log message="((((((((((    Completed .... update_salesforce_with_student_data" loggingLevel="INFO"/>
    </route -->

<!--    ***************************************************************************     -->


  </camelContext>

</beans>
