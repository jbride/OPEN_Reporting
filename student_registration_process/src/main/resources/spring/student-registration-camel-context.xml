<?xml version="1.0" encoding="UTF-8"?>

<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:camel="http://camel.apache.org/schema/spring"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
        ">

    <!-- Defines transactionalDS bean along with any other environment specific needs -->
    <import resource="classpath:spring/environment-specific-camel-context.xml" />

    <!-- Spring configuration based on annotations: required for Spring Autowiring -->
    <!-- Fuse on EAP:  also needs to specify the following in application's jboss-deployment-structure.xml :
       <module name="org.springframework.spring" export="true" meta-inf="export" /> 
    -->
    <context:annotation-config />

    <!-- Define the lms_transactional JDBC templates -->
    <bean id="lmsJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="transactionalDS" />
    </bean>

    <!-- Step 3: Define the DAOs -->
    <bean id="canonicalDAO" class="com.redhat.gpe.dao.DomainDAOImpl" />

    <bean id="emailServiceBean" class="com.redhat.gpte.services.EmailServiceBean" />
    <bean id="studentRegBean" class="com.redhat.gpte.studentregistration.service.StudentRegistrationServiceBean" />
    <bean id="ipaServiceBean" class="com.redhat.gpte.studentregistration.service.IPAHTTPServiceBean" />
    <bean id="ldapServiceBean"  class="com.redhat.gpte.studentregistration.service.LDAPServiceBean" />
    <bean id="updateStudentAttributeResultsAggregatorStrategy" class="com.redhat.gpte.studentregistration.service.UpdateStudentAttributesResultsAggregator" />

  <!-- bridging Spring and Camel property placeholders -->
  <camelContext trace="false" id="user-registration-process" xmlns="http://camel.apache.org/schema/spring">
    <dataFormats>
        <bindy type="Csv" classType="com.redhat.gpte.studentregistration.util.StudentRegistrationBindy" id="studentRegBindy"/>
    </dataFormats>

    <onException>
        <exception>java.lang.Exception</exception>

        <!-- Exception propogated to JUnit tests when set to false -->
        <!-- Setting of sys property substition doesn't appear to take affect -->
        <!-- handled><constant>{{sb_onexception_handled}}</constant></handled -->
        <!--handled><constant>{{ipa_onexception_handled}}</constant></handled-->
        <handled><constant>true</constant></handled>

        <log message="Exception encountered : ${exception.message}" loggingLevel="ERROR"/>
        <log message="${exception.stacktrace}" loggingLevel="ERROR"/>
        <setBody><simple>${exception.message}</simple></setBody>
        <to uri="seda:send-email"/>
    </onException>



    <route id="determineCompanyIdAndPersistCompanyIfNeedBe">
        <description>
            1)  Given a Student object (with email populated), attempts to determine information (such as companyName) about the company that the student is affiliated with
            2)  In doing so, this route may optionally query IPA LDAP for that information (which in doing so, also provides the  geo and role of a student)
            2)  If student email found, then :
                a) Student object populated with attributes is returned
                b) Company information is optionally 
            3)  If student email not found, validation exception is thrown
            4)  Accepts the following boolean Header values:
                a) queryldap
                b) updatecompany
        </description>
        <from uri="vm:determineCompanyIdAndPersistCompanyIfNeedBe"/>
        <to uri="bean:ldapServiceBean?method=determineCompanyIdAndPersistCompanyIfNeedBe" id="determineCompanyIdAndPersistCompanyIfNeedBe" />
    </route>



<!-- *************************          Retrieve RHT Student  LDAP Attributes       ******************************  -->
    <route id="check-for-RHT-studentAttributes-in-batch">
        <description>
            1)  Periodically checks that all attributes (ie:  geo and title) in the Student table are populated
            2)  In case of missing attributes, queries GPTE LDAP and adds the results to Student table

                NOTE:  Student attributes are useful for Dashbuilder reporting filters
        </description>
        <from uri="{{sr_check-for-rht-student_attributes_batch_uri}}"/>
        <log message="@@@@@@@@@@@@@@@@@@@@@@@@@    Starting .... check-for-studentAttributes.  Log written to: {{sr_ldap_query_output_uri}}" loggingLevel="INFO"/>
        <setBody><constant>email,companyName,roles,region,subregion,country</constant></setBody>
        <to uri="{{sr_ldap_query_output_uri}}"/>
        <to uri="bean:studentRegBean?method=selectRHTStudentsWithMissingAttributes"/>
        <filter>
            <simple>${header.studentsToUpdate} > 0</simple>

            <split id="loop-for-each-student-to-get-attributes">
                <simple>${body}</simple>
                <filter>

                    <!-- filter for RHT students only when updating Skills Exchange data -->
                    <method ref="studentRegBean" method="isRedHatStudent"></method>

                    <log message="${body.email} : retrieving LDAP metadata"/>
                    <to uri="bean:ldapServiceBean?method=getStudentAttributesFromLDAP" id="getStudentAttributes" />
                    <to uri="direct:studentAttributeAggregate" />
                    <filter>
                        <constant>{{sr_persist_student_update_from_ipa_response}}</constant>
                        <to uri="direct:persist-student" />
                    </filter>
                </filter>
                <setBody><simple>${body.toCsv()}</simple></setBody>
                <to uri="{{sr_ldap_query_output_append_uri}}"/>
            </split>

            <!-- Now that route has looped through all students with missing attributes, send an aggregated report -->
            <setHeader headerName="aggregation_stop"><constant>"STOP"</constant></setHeader>
            <to uri="direct:studentAttributeAggregate" />

        </filter>
        <log message="@@@@@@@@@@@@@@@@@@@@@@@@@ done\n" loggingLevel="INFO"/>
    </route>

    <route id="studentAttribute-aggregate" >
        <description>
            1)  Upon onCompletion, throws the following exception if any problems encountered:  com.redhat.gpte.studentregistration.util.InvalidAttributeException
            2)  onException processor catches InvalidAttributeExeption and logs issues to value of system property: sr_ldap_query_output_uri
        </description>
        <from uri="direct:studentAttributeAggregate" />
        <aggregate strategyRef="updateStudentAttributeResultsAggregatorStrategy" >
            <correlationExpression>
                <simple>true</simple>
            </correlationExpression>
            <completionPredicate>
                <simple>${body} contains 'STOP'</simple>
            </completionPredicate>

            <!-- No errors encountered;  send email of successful processing -->
            <setBody><constant>Skills Exchange Integration App:  All Red Hat students updated with LDAP metadata</constant></setBody>
        </aggregate>
        <onException>
            <exception>com.redhat.gpte.studentregistration.util.InvalidAttributeException</exception>
            <setBody><simple>${exception.message}</simple></setBody>
            <to uri="{{sr_ldap_query_output_append_uri}}"/>
        </onException>

    </route>

    <route id="get-student-attributes-from-ipa" >
        <description>
            1)  Given a Student object, querys GPTE IPA for various attributes
            2)  Used for fine grain testing of ability to query for student information from LDAP
        </description>
        <from uri="direct:get-student-attributes-from-ipa"/>
        <to uri="bean:ldapServiceBean?method=getStudentAttributesFromLDAP" />
        <setBody><simple>${body.toCsv()}</simple></setBody>
        <to uri="{{sr_ldap_query_output_append_uri}}"/>
        <log message="get-student-attributes-from-ipa: exceptions = \n ${header.validation_exception_buffer} \n" />
    </route>

<!-- ***********************************************************************************************************  -->





<!-- *******************         Process Student Registrations           *****************************************   -->

    <route id="receive-sumtotal-student-registrations">
        <description>
            1) Executes validation logic on inbound Student Registration data file generated from SumTotal
            2) Kicks back data that does not pass validation logic and sends notification email of problem(s) to a list or recipients customized for this business service
            3) Persists Student objects

            Note regarding sumtotal data file:
                It has duplicates because we are pulling the data from the registration of each ELAB course.  
                So if a person registers for an accreditation that has 3 ELABs in it, they will appear 3 times.
        </description>
        <from uri="{{sr_receive_sumtotal_student_reg_input-uri}}"/>
        <log message="Received Student Registration file from: ${header.Return-Path}, subject ${header.subject} , ${header.CamelFileName}" id="log_student_reg_receive"/>
        <setHeader headerName="ROUTE_SPECIFIC_SUBJECT"><simple>OPENTLC Daily Import Exceptions: ${date:now:MM-dd-yy} : {{jboss.host.name}}  : ${header.CamelFileName}</simple></setHeader>
        <setHeader headerName="ROUTE_SPECIFIC_EMAILS"><constant>open-program@redhat.com</constant></setHeader>
        <unmarshal ref="studentRegBindy"/>
        <doTry>
                <!--potentially throws this exception:
                    Failed to invoke method: size on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: size not found on bean: DokeosCourseCompletion -->
                <log message="# student registrations found in ${header.CamelFileName} : ${body.size()}"/>
                <doCatch>
                    <exception>org.apache.camel.language.bean.RuntimeBeanExpressionException</exception>
                    <log message="only 1 student registration found in ${header.CamelFileName}"/>
                    <to uri="bean:studentRegBean?method=clearException" />
                </doCatch>
        </doTry>
        <to uri="direct:process-student-registrations-direct" />
        <log message="Completed Student Registration processing of file:  ${header.CamelFileName}"/>
    </route>


    <route id="process-student-registrations-vm">
        <from uri="vm:process-student-registrations-vm"/>
        <to uri="direct:process-student-registrations-direct" />
    </route>
    <route id="process-student-registrations-direct">
        <description>
            1)  Accepts Collection of StudentRegistrationBindy
        </description>
        <from uri="direct:process-student-registrations-direct"/>

        <!-- Sets header of Collection<DenormalizedStudents> for later downstream processing -->
        <to uri="bean:ldapServiceBean?method=convertStudentRegBindyToCanonicalStudents" />

        <to uri="bean:ldapServiceBean?method=throwAnyCachedExceptions" />
        <to uri="direct:persist-student-list"/>

        <!-- Requires Collection<DenormalizedStudent> as body -->
        <setBody><simple>${header.sr_denormalized_students_to_process}</simple></setBody>
        <to uri="vm:sr_post-new-students-to-ipa-uri" />
    </route>



    <route id="process-denormalized-student-vm">
        <from uri="vm:process-denormalized-student-vm"/>
        <to uri="direct:process-denormalized-student-direct" />
    </route>

    <route id="process-denormalized-student-direct">
        <description>
            1)  Accepts Collection of DenormalizedStudent
            2)  Accepts the following optional boolean Header values:
                a) queryldap
                b) updatecompany
        </description>
        <from uri="direct:process-denormalized-student-direct"/>
        <to uri="bean:ldapServiceBean?method=determineCompanyIdAndPersistCompanyIfNeedBeGivenDenormalizedStudent" />
        <to uri="bean:ldapServiceBean?method=setStudentToHeader" />
        <to uri="bean:ldapServiceBean?method=addBodyToCollection" />
        <to uri="vm:sr_post-new-students-to-ipa-uri" />
        <to uri="bean:ldapServiceBean?method=setStudentToBody" />
        <to uri="direct:persist-student"/>
    </route>




    <route id="post-new-students-to-ipa-batch">
        <description>
            1. Periodically query database for Students whose information needs to be pushed to GPTE IPA
            2. Create collection of these students and pass to the following route:  post-new-students-to-ipa
        </description>
        <from uri="{{sr_post-new-students-to-ipa-batch-uri}}"/>
        <log message="*!*!*!*!   Post New Students to IPA ...... Starting" id="log_post_new_students_log"/>
        <to uri="bean:studentRegBean?method=queryForStudentsToPushToIPA" />
        <to uri="vm:sr_post-new-students-to-ipa-uri" />
        <log message="*!*!*!*!   Post New Students to IPA ...... Completed processing of: /tmp/gpte/ipa_student_reg_uploads/${date:now:yyyyMMdd_HHmm}.csv" id="log_post_new_students_done"/>
    </route>

    <route id="post-new-students-to-ipa">
        <description>
            1. Accepts: Collection of DenormalizedStudent
            2. Create an upload file of this Student information
            3. Write the upload file to disk (for possible debug purposes) and POST to GPTE IPA HTTP service
            4. Parse the response body pertaining to each student and, if no errors, update database for that student indicating that GPTE IPA now has record of that student information
        </description>
        <from uri="vm:sr_post-new-students-to-ipa-uri"/>
        <choice>
          <when>
            <simple>${body.size} > 0 </simple>
            <setHeader headerName="unprocessedStudentList" id="unprocessedStudentList-set-header" >
                <simple>${body}</simple>
            </setHeader>
            <to uri="bean:ipaServiceBean?method=createLdapHttpUploadFile" />
            <to uri="file:/tmp/gpte/ipa_student_reg_uploads?fileName=${date:now:yyyyMMdd_HHmm}.csv" />
            <log message="*!*!*!*!   Just wrote IPA upload file to: /tmp/gpte/ipa_student_reg_uploads/${date:now:yyyyMMdd_HHmm}.csv" id="log_write_file"/>
            <choice>
                <when>
                    <simple>{{ipa_ldap.testMode}}</simple>
                    <log message="ipa_ldap.testMode set to true.  Will not upload to IPA LDAP"/>
                </when>
                <otherwise>
                    <to uri="bean:ipaServiceBean?method=uploadToLdapServer"/>
                    <setBody><simple>${header.unprocessedStudentList}</simple></setBody>
                    <to uri="bean:studentRegBean?method=updateIPAFlagOnStudents" />
                </otherwise>
            </choice>
          </when>
        </choice>
    </route>

<!--        ***************************************************************************************************         -->





<!--        *************                    process student updates                       ********************         -->
    <route id="process-student-updates">
        <description>
            1)  Update Students directly 
        </description>
        <from uri="vm:sr_process-student-updates-uri"/>
        <split streaming="true" >
            <tokenize token="\n" />
            <log message="body = ${body} " id="logstudentrecordbody"/>
        </split>
        <log message="*!*!*!*!   process student updates" id="processStudentUpdates"/>
    </route>
<!--        ***************************************************************************************************         -->






<!--        *************                   generic utility routes                  *******************         -->

    <route id="persist-student" >
        <from uri="direct:persist-student" />
        <!--log message="${body.email} : About to update student"/ -->
        <to uri="bean:studentRegBean?method=updateStudent" id="update-student" />
    </route>

    <route id="persist-student-list" >
        <from uri="direct:persist-student-list" />
        <split id="for-each-new-student-reg">
                <simple>${body}</simple>
                <to uri="direct:persist-student" />
                <delay><constant>50</constant></delay>
        </split>
    </route>


    <route id="vm-persist-company" >
        <from uri="vm:persist-company" />
        <to uri="direct:persist-company" id="update-company-direct" />
    </route>
    <route id="persist-company" >
        <from uri="direct:persist-company" />
        <to uri="bean:studentRegBean?method=updateCompany" id="update-company" />
    </route>

    <route id="send-email">
        <from uri="seda:send-email"/>
        <to uri="bean:emailServiceBean?method=setHeaderToWithProperEmails"/>
        <to uri="bean:emailServiceBean?method=clearAttachments"/>
        <choice id="if-exception-exists">
            <when>
                <simple>${exception.message} != null</simple>
                <choice id="if-subject-does-not-exist">
                    <when>
                        <simple>${header.ROUTE_SPECIFIC_SUBJECT} != null</simple>
                        <setHeader headerName="Subject"><simple>${header.ROUTE_SPECIFIC_SUBJECT}</simple></setHeader>
                    </when>
                    <otherwise>
                        <setHeader headerName="Subject"><simple>GPTE Student Registration Service {{jboss.host.name}}: Problem processing ${header.CamelFileName}</simple></setHeader>
                    </otherwise>
                </choice>

                <!-- Appears that exception.message is not passed to velocity template -->
                <setBody><simple>${exception.message}</simple></setBody>

                <to uri="velocity:emailTemplates/problem-reply-email.vm"/>
            </when>
            <otherwise>
                <setHeader headerName="Subject">
                    <simple>GPTE Student Registration Service {{jboss.host.name}}: Success processing ${header.CamelFileName}</simple>
                </setHeader>
                <to uri="velocity:emailTemplates/auto-reply-email.vm"/>
            </otherwise>
        </choice>
        <to uri="vm:send-email-global"/>
    </route>



<!--        *********************           experimental        *******************     -->

    <!--route autoStartup="true" id="update_salesforce_with_student_data">
        <from uri="{{sr_update_salesforce_with_student_data}}" />
        <log message="((((((((((    Starting .... update_salesforce_with_student_data" loggingLevel="INFO"/>
        <log message="((((((((((    Completed .... update_salesforce_with_student_data" loggingLevel="INFO"/>
    </route -->

<!--    ***************************************************************************     -->


  </camelContext>

</beans>
