<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
         "> 

  <!-- Defines transactionalDS bean along with any other environment specific needs -->
  <import resource="classpath:spring/environment-specific-camel-context.xml" />

  <!-- Spring configuration based on annotations: required for Spring Autowiring -->
  <context:annotation-config />

  <bean id="sbJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="transactionalDS" />
  </bean>

  <bean id="tsJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="totaraShadowDS" />
  </bean>

  <bean id="canonicalDAO" class="com.redhat.gpe.dao.DomainDAOImpl" />
  <bean id="totaraShadowDAO" class="com.redhat.gpe.coursecompletion.dao.TotaraShadowDAOImpl" />

  <bean id="cCompletionServiceBean"         class="com.redhat.gpe.coursecompletion.service.CourseCompletionServiceBean" />
  <bean id="emailServiceBean"               class="com.redhat.gpte.services.EmailServiceBean" />


  <camelContext trace="false" id="course-completion" xmlns="http://camel.apache.org/schema/spring">
      
    <dataFormats>
        <bindy type="Csv" classType="com.redhat.gpe.coursecompletion.dokeos.DokeosCourseCompletion" id="bindyDokeos" />
        <bindy type="Csv" classType="com.redhat.gpe.coursecompletion.sumtotal.SumtotalCourseCompletion" id="bindySumtotal"/>
    </dataFormats>

    <route id="receive-sumtotal-course-completions">
        <description>
            1)  Executes validation logic on inbound Sumtotal Course Completion data file
            2)  Kicks back data files that do not pass validation logic and sends notification email of problem
            3)  Persists valid course completions
        </description>
        <from uri="{{cc_receive_sumtotal_input_uri}}" />
        <log message="Received Sumttotal email. from: ${header.Return-Path}, subject ${header.subject}, ${header.CamelFileName}" id="log_sumtotal_receive"/>
        <setHeader headerName="ROUTE_SPECIFIC_EMAILS"><constant>smangan@redhat.com,jdoser@redhat.com,nihall@redhat.com,lana@redhat.com</constant></setHeader>
            <unmarshal ref="bindySumtotal"/>
            <doTry>
                <!--potentially throws this exception:
                    Failed to invoke method: size on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: size not found on bean: SumtotalCourseCompletion -->
                <log message="# sumtotal student courses found in ${header.CamelFileName} : ${body.size}"/>
                <doCatch>
                    <exception>org.apache.camel.language.bean.RuntimeBeanExpressionException</exception>
                    <log message="only 1 sumtotal student course found in ${header.CamelFileName}"/>
                </doCatch>
            </doTry>
            <to uri="bean:cCompletionServiceBean?method=validateSumtotalCourseCompletions" />
            <split id="for-each-sumtotal-student-course">
                <simple>${body}</simple>
                <doTry>
                    <to uri="bean:cCompletionServiceBean?method=convertSumtotalCourseCompletionToStudentCourse" id="sumtotal-convert"/>
                    <doCatch>
                        <exception>org.springframework.dao.EmptyResultDataAccessException</exception>
                        <log message="${body.email} : Not found in Students table.  Will now add" loggingLevel="WARN" />
                        <to uri="bean:cCompletionServiceBean?method=insertNewStudentGivenSumtotalCourseCompletion" id="update-sumtotal-student"/>
                        <to uri="bean:cCompletionServiceBean?method=convertSumtotalCourseCompletionToStudentCourse" id="sumtotal-re-attempt-to-convert"/>
                    </doCatch>
                </doTry>
                <to uri="direct:add-student-course-to-db" id="cc_add-sumtotal-student-course-to-db" />
            </split>
        <to uri="bean:cCompletionServiceBean?method=setSumtotalProcessingExceptionsToBody" />
        <to uri="seda:send-email"/>
    </route>

    <route id="receive-dokeos-course-completions">
        <description>
            - Accepts list of dokeos course completion spreadsheets
            - Executes validation logic on inbound Dokeos data file
            - Kicks back data files that do not pass validation logic and sends notification email of problem
            - Iterates through course completions in each spreadsheet
            - Persists course completions (StudentCourse objects)
            - Because course completions are now originating from rh.dokeos.com in an automated manner, no longer will send receipt of confirmation.
        </description>
        <from uri="{{cc_receive_dokeos_input_uri}}" />
        <log message="Received Dokeos email. from: ${header.Return-Path}, subject ${header.subject}, ${header.CamelFileName}" id="log_dokeos_receive"/>
                <unmarshal ref="bindyDokeos"/>
                <doTry>
                    <!--potentially throws this exception:
                        Failed to invoke method: size on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: size not found on bean: DokeosCourseCompletion -->
                    <log message="# dokeos student courses found in ${header.CamelFileName} : ${body.size()}"/>
                    <doCatch>
                        <exception>org.apache.camel.language.bean.RuntimeBeanExpressionException</exception>
                        <log message="only 1 dokeos student course found in ${header.CamelFileName}"/>
                        <to uri="bean:cCompletionServiceBean?method=clearException" id="clear-exception"/>
                    </doCatch>
                </doTry>
                <split id="for-each-dokeos-course-completion">
                    <simple>${body}</simple>
                    <choice id="if-assignment-passing-score">
                        <when>
                            <simple>${body.quizName} contains 'Assignment' &amp;&amp; ${body.scoreInt} &lt; 100</simple>
                            <log message="${body.email} : Will not persist dokeos student assignment due to non-passing score: ${body.score}" id="log_dokeos_assignment_not_100"/>
                        </when>
                        <otherwise>
                            <when>
                                <simple>${body.quizName} contains 'Assignment'</simple>
                                <setHeader headerName="ROUTE_SPECIFIC_EMAILS"><constant>kiboone@redhat.com,sduttama@redhat.com,tshaikh@redhat.com</constant></setHeader>
                                <to uri="bean:emailServiceBean?method=setHeaderToWithProperEmails"/>
                                <to uri="bean:emailServiceBean?method=clearAttachments"/>
                                <setHeader headerName="Subject">
                                    <simple>GPTE Advanced ILT Completion: {{jboss.host.name}}: ${body.email}</simple>
                                </setHeader>
                                <to uri="seda:send-generic-email"/>
                            </when>
                            <doTry>
                                <to uri="bean:cCompletionServiceBean?method=convertDokeosCourseCompletionToStudentCourse" id="dokeos-convert"/>
                                <to uri="direct:add-student-course-to-db" id="cc_add-dokeos-student-course-to-db" />
                                <doCatch>
                                    <exception>com.redhat.gpte.services.InvalidCourseException</exception>
                                    <handled><constant>false</constant></handled>
                                    <setHeader headerName="ROUTE_SPECIFIC_EMAILS"><constant>jdisrael@redhat.com,nihall@redhat.com</constant></setHeader>
                                    <to uri="bean:emailServiceBean?method=setHeaderToWithProperEmails"/>
                                    <to uri="bean:emailServiceBean?method=clearAttachments"/>
                                    <setHeader headerName="Subject">
                                        <simple>GPTE Course Completion Service {{jboss.host.name}}: Problem processing ${header.CamelFileName}</simple>
                                    </setHeader>
                                    <setBody><simple>${exception.message}</simple></setBody>
                                    <to uri="seda:send-generic-email"/>
                                </doCatch>
                                <doCatch>
                                    <exception>org.springframework.dao.EmptyResultDataAccessException</exception>
                                    <handled><constant>true</constant></handled>
                                    <log message="${body.email} : ${body.quizName} : ${body.assessmentDate} : Not found in Students table.  Will now add" loggingLevel="WARN" />
                                    <to uri="bean:cCompletionServiceBean?method=insertNewStudentGivenDokeosCourseCompletion" id="update-dokeos-student"/>
                                    <to uri="bean:cCompletionServiceBean?method=convertDokeosCourseCompletionToStudentCourse" id="dokeos-re-attempt-to-convert"/>
                                    <to uri="direct:add-student-course-to-db" id="cc_add-dokeos-student-course-to-db" />
                                </doCatch>
                            </doTry>
                        </otherwise>
                    </choice>
                </split>
    </route>

    <route id="test-totara-jdbc-connection">
        <from uri="direct:test-totara-jdbc-connection" />
        <to uri="bean:cCompletionServiceBean?method=testTotaraJDBCConnection"/>
        <log message="test-totara-jdbc-connection:  ${body}" loggingLevel="INFO"/>
    </route>

    <route id="poll-totara-course-completions">
        <description> 
            Purpose: 
                - Periodically poll query Totara Shadow database for any new course completions.  
                - Process each Totara course completion.
        </description>
        <from uri="{{cc_poll_totara_course_completions_input_uri}}" />
        <to uri="bean:cCompletionServiceBean?method=getMostRecentTotaraCourseCompletionId"/>
        <log message="@@@@@@@@@@@@@@@@@@@@@@@@@@      Starting .... poll-totara-course-completions:  most recent totara CC = ${body} : TOTARA_COURSE_COMPLETION_LIMIT = ${header.TOTARA_COURSE_COMPLETION_LIMIT}" loggingLevel="INFO"/>
        <to uri="bean:cCompletionServiceBean?method=getLatestTotaraCourseCompletions"/>
        <split>
            <simple>${body}</simple>
            <to uri="direct:process-single-totara-course-completion" />
        </split>
    </route>

    <route id="process-totara-course-completions-by-range-vm">
        <from uri="vm:process-totara-course-completions-by-range" />
        <to uri="direct:process-totara-course-completions-by-range" />
    </route>
    <route id="process-totara-course-completions-by-range">
        <description> 
            Purpose: Process Totara shadow database for course completions given a range of totara course completion IDs
        </description>
        <from uri="direct:process-totara-course-completions-by-range" />
        <log message="@@@@@@@@@@@@@@@       Starting query-totara-course-completions-by-range: ${header.LOW_CC_ID} ${header.HIGH_CC_ID}" loggingLevel="INFO"/>
        <to uri="bean:cCompletionServiceBean?method=getTotaraCourseCompletionsByRange"/>
        <split>
            <simple>${body}</simple>
            <to uri="direct:process-single-totara-course-completion" />
        </split>
    </route>

    <route id="process-single-totara-course-completion">
        <description> 
            Purpose:  Process a single Totara Course Completion
        </description>
        <from uri="direct:process-single-totara-course-completion" />
        <doTry>
            <to uri="bean:cCompletionServiceBean?method=convertTotaraCourseCompletion"/>
            <doCatch>
                    <exception>com.redhat.gpte.services.InvalidStudentException</exception>
                    <log message="${body.email} : Not found in Students table.  Will now add" loggingLevel="WARN" />
                    <to uri="bean:cCompletionServiceBean?method=insertNewStudentGivenTotaraCourseCompletion" id="update-totara-student"/>
                    <to uri="bean:cCompletionServiceBean?method=convertTotaraCourseCompletion" id="totara-re-attempt-to-convert"/>
            </doCatch>
        </doTry>
        <to uri="direct:add-student-course-to-db" id="cc_add-totara-student-course-to-db" />
    </route>

    <route id="add-student-course-to-db">
        <description> 
            Expects the following payload:  CourseCompletion
            Responsible for insertion of new StudentCourse record into database
        </description>
        <from uri="direct:add-student-course-to-db"/>
        <choice id="if-passing-score">
            <when>
                <simple>${body.assessmentScore} >= 70</simple>
                <when>
                    <simple>{{cc_persist_student_course}} == true</simple>
                    <log message="${body.student.email} : Adding student course to db: '${body.course.coursename}' '${body.assessmentScore}'"/>
                    <to uri="bean:cCompletionServiceBean?method=addStudentCourseToDB" id="add-course-completion-to-db"/>
                </when>
            </when>
            <otherwise>
                <log message="${body.student.email} : Will not persist student course due to non-passing score: ${body.courseName}" id="log_student_course_not_passed"/>
            </otherwise>
        </choice>
    </route>



    <!--    **********                    COURSE and COURSE MAPPINGS maintenance                    *********   -->

    <route id="process-new-courses-and-mappings" >
        <description>
            https://github.com/redhat-gpe/OPEN_Reporting/issues/197
            Provide ops team with ability to make changes to Courses and CourseMappings tables

            Overview:
                - GPTE Reporting rules accreditation spreadsheet includes the following tab:   Courses and CourseMappings
                - This spreadsheet can be downloaded as a tab separated value (tsv) file and emailed to the GPTE Reporting email account used in development:  rhtgptetest@yahoo.com
                - The Course and CourseMappings spreadsheet is processed by this service.
                - The contents of the spreadsheet will completely replace any and all data of CourseMappings table of lms_transactional database.
                - The contents of the spreadsheet will insert / update all data of Courses table of lms_transactional database.
        </description>
        <from uri="vm:cc_process-new-courses-and-mappings-uri" />

        <!-- 1)  Blow away existing data in CourseMappings -->
        <to uri="bean:cCompletionServiceBean?method=deleteAllFromCourseMappings" /> 
        <log message="Following # of records deleted from CourseMappings tables: ${header.COURSE_MAPPING_ROWS_AFFECTED}" />

        <!-- 2)  Iterate through each row of spreadsheet -->
        <split streaming="true" >
            <tokenize token="\n" />

            <!-- 3) insert / update into Courses and fully re-populate CourseMappings -->
            <to uri="bean:cCompletionServiceBean?method=processCourseRefreshSpreadsheetRecord" /> 

            <choice><when><simple>${property.CamelSplitComplete} == true</simple>
                <log message="Just refreshed Course and CourseMappings using the following # of records:  ${property.CamelSplitIndex}" />
            </when></choice>
        </split>

    </route>

    <!--    *************************************************************************************************   -->






    <!--    *************************************************************************************************   -->
    <!--    *************                       Pathgather                                      *************   -->
    <route id="update-pathgather-with-course-completion" >
        <description>
            1) Expects the following payload:  CourseCompletion
            2) Responsible for ?????
        </description>
        <from uri="direct:update-pathgather-with-course-completion" />
        <log message="******** Invoking pathgatherer     done" loggingLevel="INFO"/>
    </route>

    <!--    *************************************************************************************************   -->

    <route id="get-course-by-course-name" >
        <description>
            1) Given a course name, looks up course in lms_transactional.Courses and returns Course object.
            2) If course name not found, returns null
        </description>
        <from uri="vm:get-course-by-course-name" />
        <log message="get-course-by-course-name:  body = ${body}" />
        <to uri="bean:cCompletionServiceBean?method=getCourseByCourseName()" id="getCourseByCourseName"/>
    </route>

    <route id="send-email">
        <from uri="seda:send-email"/>
        <to uri="bean:emailServiceBean?method=setHeaderToWithProperEmails"/>
        <to uri="bean:emailServiceBean?method=clearAttachments"/>
        <choice id="if-exception-exists">
            <when>
                <simple>${exception.message} != null</simple>
                <setHeader headerName="Subject">
                    <simple>GPTE Course Completion Service {{jboss.host.name}}: Problem processing ${header.CamelFileName}</simple>
                </setHeader>

                <!-- Appears that exception.message is not passed to velocity template -->
                <setBody><simple>${exception.message}</simple></setBody>

                <to uri="velocity:emailTemplates/problem-reply-email.vm"/>
            </when>
            <otherwise>
                <setHeader headerName="Subject">
                    <simple>GPTE Course Completion Service {{jboss.host.name}}: Success processing ${header.CamelFileName}</simple>
                </setHeader>
                <to uri="velocity:emailTemplates/auto-reply-email.vm"/>
            </otherwise>
        </choice>
        <to uri="vm:send-email-global"/>
    </route>

    <route>
        <from uri="seda:send-generic-email"/>
        <to uri="velocity:emailTemplates/auto-reply-email.vm"/>
        <to uri="vm:send-email-global"/>
    </route>

  </camelContext>
</beans>
